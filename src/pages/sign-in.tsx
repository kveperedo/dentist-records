import React from 'react';
import { GetServerSideProps, NextPage } from 'next';
import Head from 'next/head';
import Button from '../components/Button';
import { signIn } from 'next-auth/react';
import { unstable_getServerSession } from 'next-auth';
import { authOptions } from './api/auth/[...nextauth]';
import Image from 'next/image';
import { join } from 'tailwind-merge';

const GoogleIcon = () => {
	return (
		<svg
			className='w-5 h-5 text-white mr-2'
			focusable='false'
			aria-hidden='true'
			viewBox='0 0 24 24'
			data-testid='GoogleIcon'
		>
			<path fill='currentcolor' d='M12.545,10.239v3.821h5.445c-0.712,2.315-2.647,3.972-5.445,3.972c-3.332,0-6.033-2.701-6.033-6.032s2.701-6.032,6.033-6.032c1.498,0,2.866,0.549,3.921,1.453l2.814-2.814C17.503,2.988,15.139,2,12.545,2C7.021,2,2.543,6.477,2.543,12s4.478,10,10.002,10c8.396,0,10.249-7.85,9.426-11.748L12.545,10.239z'></path>
		</svg>
	);
};

const SignInPage: NextPage = () => {
	const handleSignIn = async () => {
		signIn('google');
	};

	return (
		<>
			<Head>
				<title>Create T3 App</title>
				<meta name='description' content='Generated by create-t3-app' />
				<link rel='icon' href='/favicon.ico' />
			</Head>

			<div className='min-h-screen bg-primary-100'>
				<main className='container m-auto flex h-screen items-center justify-center p-8'>
					<div className={join(`flex flex-col items-center bg-white rounded shadow-md p-8 gap-4`)}>
						<h1 className='text-2xl text-primary-700 text-center'>Log In</h1>
						<Image src='/assets/sign-in.svg' alt='sign-in' width={192} height={192} />
						<p className='text-base text-primary-500 text-center'>
							Enter your credentials to access your records
						</p>
						<Button variant='primary' leftIcon={<GoogleIcon />} onClick={handleSignIn}>
							Sign in with Google
						</Button>
					</div>
				</main>
			</div>
		</>
	);
};

export default SignInPage;

export const getServerSideProps: GetServerSideProps = async ({ req, res }) => {
	const session = await unstable_getServerSession(req, res, authOptions);

	if (session?.user) {
		return {
			redirect: {
				destination: '/',
				permanent: true,
			},
			props: {},
		};
	}

	return {
		props: {
			session,
		},
	};
};
